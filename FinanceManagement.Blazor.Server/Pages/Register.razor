@page "/register"
@using FinanceManagement.Blazor.Server.Services.Interfaces;
@using FinanceManagement.Models.Authorization;
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText class="form-control" id="name" @bind-Value="@registerModel.Name" />
        <ValidationMessage For="@(()=>registerModel.Name)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText class="form-control" id="email" @bind-Value="@registerModel.Email" />
        <ValidationMessage For="@(()=>registerModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText type="password" class="form-control" id="password" @bind-Value="@registerModel.Password" />
        <ValidationMessage For="@(()=>registerModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (registrationErrors != null)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in registrationErrors)
        {
            <p>@error</p>
        }
    </div>
}

@code {
    private UserRegistrationModel registerModel = new();
    private IEnumerable<string>? registrationErrors;

    private async Task RegisterUser()
    {
        registrationErrors = null;
        var result = await AccountService.RegisterAsync(registerModel.Name, registerModel.Email, registerModel.Password);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/login", true);
        }
        else
        {
            registrationErrors = result.Errors;
        }
    }
}